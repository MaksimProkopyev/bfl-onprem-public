name: pr-codex-gpt-review
on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build PR diff (base..head)
        id: diff
        run: |
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"
          git diff --unified=0 --no-color "$BASE" "$HEAD" > pr.diff
          head -c 200000 pr.diff > pr.trim.diff
          echo "size=$(wc -c < pr.trim.diff)" >> $GITHUB_OUTPUT

      - name: Read PR labels
        id: labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.pull_request.labels.map(l=>l.name);
            core.setOutput('labels', JSON.stringify(labels));

      - name: Decide reasoning_effort (files + labels)
        id: decide
        env:
          LABELS_JSON: ${{ steps.labels.outputs.labels }}
          DEFAULT_EFFORT: ${{ vars.OPENAI_REASONING_EFFORT || 'medium' }}
        run: |
          set -euo pipefail
          BASE="${{ github.event.pull_request.base.sha }}"
          HEAD="${{ github.event.pull_request.head.sha }}"
          files=$(git diff --name-only "$BASE" "$HEAD" || true)

          effort="$DEFAULT_EFFORT"

          # high –¥–ª—è backend/infra/worker/alerts
          echo "$files" | grep -E '^(services/(api|workers)|observability/|tools/|docker-compose\.yml|infra/)' >/dev/null && effort="high"

          # low –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –¥–æ–∫–∏/–∞—Å—Å–µ—Ç—ã/—Å—Ç–∏–ª–∏, –±–µ–∑ –∫–æ–¥–∞/–¥–æ–∫–µ—Ä–∞
          if echo "$files" | grep -E '(\.md$|\.txt$|^docs/|\.svg$|\.png$|\.jpg$|\.css$)' >/dev/null \
             && ! echo "$files" | grep -E '(\.py$|\.ts$|\.tsx$|\.js$|\.go$|\.rs$|\.java$|\.kt$|\.sh$|Dockerfile$|docker-compose\.yml$)' >/dev/null; then
            effort="low"
          fi

          # label critical-review -> high
          if echo "$LABELS_JSON" | grep -qi '"critical-review"'; then
            effort="high"
          fi

          echo "effort=$effort" >> $GITHUB_OUTPUT
          printf "Chosen reasoning_effort: %s\n" "$effort"

      - name: Ask OpenAI to review (GPT-5 Thinking w/ fallback)
        id: gpt
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MODEL_PRIMARY: ${{ vars.OPENAI_MODEL || 'gpt-5-thinking' }}
          MODEL_FALLBACK: ${{ vars.OPENAI_MODEL_FALLBACK || 'gpt-4o-mini' }}
          MAX_TOKENS: ${{ vars.OPENAI_MAX_OUTPUT_TOKENS || '2000' }}
          EFFORT: ${{ steps.decide.outputs.effort }}
        run: |
          set -euo pipefail
          test -n "${OPENAI_API_KEY:-}" || { echo "OPENAI_API_KEY missing"; exit 1; }

          DIFF=$(python3 - <<'PY'
import json,sys; print(json.dumps(open("pr.trim.diff","r",encoding="utf-8",errors="ignore").read()))
PY
)

          build_payload() {
            local MODEL="$1"
            cat > payload.json <<JSON
{
  "model": "$MODEL",
  "reasoning_effort": "${EFFORT}",
  "input": [
    {
      "role": "user",
      "content": [
        {"type":"text","text":
"–í—ã—Å—Ç—É–ø–∞–π –∫–∞–∫ —Å—Ç—Ä–æ–≥–∏–π —Å–µ–Ω—å–æ—Ä-–∏–Ω–∂–µ–Ω–µ—Ä. –ü—Ä–æ–≤–µ–¥–∏ —Ä–µ–≤—å—é —ç—Ç–æ–≥–æ PR diff. –ù–∞–π–¥–∏ –±–∞–≥–∏, —É—è–∑–≤–∏–º–æ—Å—Ç–∏, –≥–æ–Ω–∫–∏, breaking-–∏–∑–º–µ–Ω–µ–Ω–∏—è API, –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ç–µ—Å—Ç–æ–≤, –Ω–µ—è—Å–Ω—ã–µ –∏–º–µ–Ω–∞ –∏ —Å—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ç—á–∏/–ø—Ä–∞–≤–∫–∏. –ï—Å–ª–∏ –≤—Å—ë –æ–∫ ‚Äî –∫—Ä–∞—Ç–∫–æ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –æ–∫. –ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏.\n\nDIFF:\n\n$DIFF"}
      ]
    }
  ],
  "max_output_tokens": ${MAX_TOKENS}
}
JSON
          }

          call_openai() {
            local MODEL="$1"
            build_payload "$MODEL"
            HTTP=$(curl -sS -o out.json -w "%{http_code}" \
              https://api.openai.com/v1/responses \
              -H "Authorization: Bearer ${OPENAI_API_KEY}" \
              -H "Content-Type: application/json" \
              --data-binary @payload.json || true)
            echo "HTTP($MODEL): $HTTP"
            echo "$HTTP"
          }

          HTTP=$(call_openai "$MODEL_PRIMARY")
          USED_MODEL="$MODEL_PRIMARY"
          if [ "$HTTP" != "200" ]; then
            echo "Primary failed, falling back to $MODEL_FALLBACK"
            HTTP=$(call_openai "$MODEL_FALLBACK")
            USED_MODEL="$MODEL_FALLBACK"
            [ "$HTTP" = "200" ] || { echo "Fallback failed"; cat out.json; exit 1; }
          fi

          REVIEW=$(jq -r '.output_text // .output[0].content[0].text // empty' out.json)
          [ -n "$REVIEW" ] || { echo "Empty review body"; cat out.json; exit 1; }

          API_MODEL=$(jq -r '.model // empty' out.json)
          USAGE_JSON=$(jq -c '.usage // {}' out.json)
          INPUT=$(jq -r '.usage.input_tokens // .usage.prompt_tokens // 0' out.json)
          OUTPUT=$(jq -r '.usage.output_tokens // 0' out.json)
          REASON=$(jq -r '.usage.reasoning_tokens // 0' out.json)

          {
            echo "review_md<<'EOF'"
            echo "ü§ñ **codex gpt review**"
            echo ""
            echo "$REVIEW"
            echo ""
            echo "<details><summary>‚ÑπÔ∏è –ú–æ–¥–µ–ª—å –∏ usage</summary>"
            echo ""
            echo "- requested: \`$USED_MODEL\`  |  served: \`${API_MODEL:-$USED_MODEL}\`"
            echo "- reasoning_effort: \`${EFFORT}\`"
            echo "- tokens ‚Äî input: $INPUT, output: $OUTPUT, reasoning: $REASON"
            echo ""
            echo "<sub>raw usage: \`$USAGE_JSON\`</sub>"
            echo "</details>"
            echo "EOF"
            echo "served_model=${API_MODEL:-$USED_MODEL}"
            echo "input_tokens=$INPUT"
            echo "output_tokens=$OUTPUT"
            echo "cached_tokens=$(jq -r '.usage.input_tokens_details.cached_tokens // 0' out.json)"
          } >> $GITHUB_OUTPUT

      - name: Estimate $ cost
        id: cost
        env:
          SERVED_MODEL: ${{ steps.gpt.outputs.served_model }}
          INPUT: ${{ steps.gpt.outputs.input_tokens }}
          OUTPUT: ${{ steps.gpt.outputs.output_tokens }}
          CACHED: ${{ steps.gpt.outputs.cached_tokens }}
        run: |
          set -euo pipefail
          IN=${INPUT:-0}
          OUT=${OUTPUT:-0}
          CACHED=${CACHED:-0}

          # $ per 1M tokens (–æ–±–Ω–æ–≤–ª—è–π –ø–æ –ø—Ä–∞–π—Å–∏–Ω–≥—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
          P_IN=0; P_IN_CACHED=0; P_OUT=0
          case "${SERVED_MODEL:-}" in
            gpt-5* )       P_IN=1.25; P_IN_CACHED=0.125; P_OUT=10.00 ;;
            gpt-4o-mini* ) P_IN=0.60; P_IN_CACHED=0.30;  P_OUT=2.40  ;;
            * )            P_IN=1.25; P_IN_CACHED=0.125; P_OUT=10.00 ;;
          esac

          py='import sys; print(format(eval(sys.stdin.read()), ".6f"))'
          IN_UNC=$(( IN - CACHED )); [ $IN_UNC -lt 0 ] && IN_UNC=0
          COST_IN=$(echo "($IN_UNC*$P_IN + $CACHED*$P_IN_CACHED)/1_000_000" | python3 -c "$py")
          COST_OUT=$(echo "($OUT*$P_OUT)/1_000_000" | python3 -c "$py")
          COST=$(echo "$COST_IN+$COST_OUT" | python3 - <<'PY'
import sys; print(format(float(sys.stdin.read()), ".6f"))
PY
)
          {
            echo "cost_total=\$$COST"
            echo "cost_breakdown=input=\$$COST_IN, output=\$$COST_OUT"
          } >> $GITHUB_OUTPUT

      - name: Post comment to PR (review + usage + $)
        if: ${{ steps.gpt.outputs.review_md != '' }}
        uses: actions/github-script@v7
        env:
          REVIEW_MD: ${{ steps.gpt.outputs.review_md }}
          COST_TOTAL: ${{ steps.cost.outputs.cost_total }}
          COST_BREAKDOWN: ${{ steps.cost.outputs.cost_breakdown }}
          SERVED_MODEL: ${{ steps.gpt.outputs.served_model }}
        with:
          script: |
            const cost = process.env.COST_TOTAL
              ? `\n\n**üíµ Estimated API cost:** ${process.env.COST_TOTAL}\n<sub>${process.env.COST_BREAKDOWN} ‚Ä¢ model: \`${process.env.SERVED_MODEL}\`</sub>`
              : '';
            const body = `${process.env.REVIEW_MD}${cost}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });
