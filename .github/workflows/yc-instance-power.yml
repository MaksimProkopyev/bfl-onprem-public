---
name: yc-instance-power
on:
  workflow_call:
    inputs:
      action:
        type: string
        required: false
        default: start
      instance_name:
        type: string
        required: true
      zone:
        type: string
        required: false
        default: ru-central1-a
      folder_id:
        type: string
        required: false
        default: ""
jobs:
  call:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Install YC CLI
        run: |
          # shellcheck disable=SC2086
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
          export PATH="$HOME/yandex-cloud/bin:$PATH"
          yc -v || true
      - name: Auth YC
        env:
          YC_SA_JSON: ${{ secrets.YC_SA_JSON }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
        run: |
          set -euo pipefail
          export PATH="$HOME/yandex-cloud/bin:$PATH"
          test -n "${YC_SA_JSON:-}" || { echo "Missing secret YC_SA_JSON"; exit 1; }
          RAW=$(mktemp) ; OUT=$(mktemp)
          printf '%s' "$YC_SA_JSON" > "$RAW"
          if jq -e . "$RAW" >/dev/null 2>&1; then
            cp "$RAW" "$OUT"
          else
            if jq -e 'type=="string"' "$RAW" >/dev/null 2>&1; then
              jq -r 'fromjson' "$RAW" > "$OUT" || true
            fi
            if ! jq -e . "$OUT" >/dev/null 2>&1; then
              CLEAN=$(mktemp)
              sed -E '/^\s*```/d;/^\s*#/d' "$RAW" > "$CLEAN" || true
              jq -e . "$CLEAN" >/dev/null 2>&1 && mv "$CLEAN" "$OUT" || base64 -d < "$CLEAN" > "$OUT" 2>/dev/null || true
            fi
          fi
          jq -e . "$OUT" >/dev/null || { echo "Invalid YC_SA_JSON content after normalization"; head -c 64 "$OUT" | hexdump -C; exit 1; }
          mv "$OUT" key.json
          yc config set service-account-key key.json
          test -n "${YC_CLOUD_ID:-}"  && yc config set cloud-id  "$YC_CLOUD_ID"  || true
          test -n "${YC_FOLDER_ID:-}" && yc config set folder-id "$YC_FOLDER_ID" || true
          yc config profile list || true
      - name: Resolve instance ID
        id: resolve
        run: |
          set -euo pipefail
          NAME="${{ inputs.instance_name }}"
          ZONE="${{ inputs.zone }}"
          ID="$(yc compute instance list --format json | jq -r --arg n "$NAME" --arg z "$ZONE" '[.[]|select(.name==$n and .zone_id==$z)][0].id')"
          test -n "$ID" || { echo "Not found: $NAME in $ZONE"; yc compute instance list; exit 1; }
          echo "id=$ID" >> "$GITHUB_OUTPUT"
      - name: Power (idempotent start/stop)
        run: |
          set -euo pipefail
          ID="${{ steps.resolve.outputs.id }}"
          ACTION="${{ inputs.action }}"
          STATE="$(yc compute instance get --id "$ID" --format json | jq -r '.status')"
          echo "Current state: $STATE"
          case "$ACTION" in
            start)
              if [[ "$STATE" == "RUNNING" ]]; then echo "Already RUNNING → no-op"; exit 0; fi
              yc compute instance start --id "$ID"
              ;;
            stop)
              if [[ "$STATE" == "STOPPED" || "$STATE" == "STOPPING" ]]; then echo "Already stopped/stopping → no-op"; exit 0; fi
              yc compute instance stop --id "$ID"
              ;;
            *) echo "Unknown action: $ACTION"; exit 2;;
          esac
          for _ in {1..60}; do
            S="$(yc compute instance get --id "$ID" --format json | jq -r '.status')"
            echo "status: $S"
            [[ "$ACTION" == start && "$S" == RUNNING ]] && break
            [[ "$ACTION" == stop  && "$S" == STOPPED ]] && break
            sleep 5
          done
          yc compute instance get --id "$ID" --format json | tee status.json
          IP="$(jq -r '.network_interfaces[]?.primary_v4_address?.one_to_one_nat?.address // empty' status.json | head -n1)"
          [[ -n "$IP" ]] && echo "External IP: $IP" || echo "No external IP"
