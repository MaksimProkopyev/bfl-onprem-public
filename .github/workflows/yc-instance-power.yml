name: yc-instance-power
on:
  workflow_call:
    inputs:
      action:        {required: false, type: string, default: start} # start|stop
      instance_name: {required: true,  type: string}
      zone:          {required: false, type: string, default: ru-central1-a}
      folder_id:     {required: false, type: string, default: ""}
jobs:
  power:
    runs-on: ubuntu-latest
    steps:
      - name: Install YC CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
          export PATH="$HOME/yandex-cloud/bin:$PATH"
          yc -v || true
      - name: Auth YC
        env:
          YC_SA_JSON: ${{ secrets.YC_SA_JSON }}
          YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
          YC_FOLDER_ID: ${{ inputs.folder_id != '' && inputs.folder_id || secrets.YC_FOLDER_ID }}
        run: |
          set -e
          export PATH="$HOME/yandex-cloud/bin:$PATH"
          test -n "$YC_SA_JSON" || { echo "Missing secret YC_SA_JSON"; exit 1; }
          printf "%s" "$YC_SA_JSON" > key.raw
          # sanitize possible markdown/base64 wrappers
          awk 'BEGIN{f=1} /^\s*```/{next} /^\s*#/{next} {print}' key.raw > key.json || true
          grep -q "{" key.json || printf "%s" "$YC_SA_JSON" | base64 -d > key.json 2>/dev/null || true
          jq -e . key.json >/dev/null || { echo "Invalid YC_SA_JSON content"; exit 1; }
          yc config set service-account-key key.json
          test -n "$YC_CLOUD_ID"  && yc config set cloud-id  "$YC_CLOUD_ID"  || true
          test -n "$YC_FOLDER_ID" && yc config set folder-id "$YC_FOLDER_ID" || true
      - name: Resolve instance ID
        id: rid
        env:
          NAME: ${{ inputs.instance_name }}
          ZONE: ${{ inputs.zone }}
        run: |
          set -e
          export PATH="$HOME/yandex-cloud/bin:$PATH"
          yc compute instance list --format json > list.json
          ID="$(jq -r --arg n "$NAME" --arg z "$ZONE" '.[] | select(.name==$n and .zone_id==$z) | .id' list.json | head -n1)"
          test -n "$ID" || { echo "Not found: $NAME in $ZONE"; yc compute instance list; exit 1; }
          echo "id=$ID" >> "$GITHUB_OUTPUT"
      - name: Power ${{ inputs.action }}
        env:
          ID: ${{ steps.rid.outputs.id }}
          ACT: ${{ inputs.action }}
        run: |
          set -e
          export PATH="$HOME/yandex-cloud/bin:$PATH"
          case "$ACT" in
            start) yc compute instance start --id "$ID" ;;
            stop)  yc compute instance stop  --id "$ID" ;;
            *) echo "Unknown action: $ACT"; exit 1 ;;
          esac
      - name: Instance status (print external IP if any)
        env:
          ID: ${{ steps.rid.outputs.id }}
        run: |
          export PATH="$HOME/yandex-cloud/bin:$PATH"
          yc compute instance get --id "$ID" --format json | tee instance.json
          IP="$(jq -r '.. | .nat_ip_address? // empty' instance.json | head -n1)"
          if [ -n "$IP" ]; then echo "External IP: $IP"; else echo "External IP not found"; fi
