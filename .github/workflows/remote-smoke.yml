name: Remote Smoke

on:
  workflow_dispatch:
    inputs:
      vm_name:
        description: "Yandex Cloud VM name"
        required: true
        default: "bfl-onprem"
      vm_login:
        description: "Linux user on VM (ubuntu/yc-user/ivmsu)"
        required: false
        default: "ubuntu"

concurrency:
  group: remote-smoke
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  smoke:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
      YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
      YC_ZONE: ${{ secrets.YC_ZONE || 'ru-central1-a' }}
      YC_SA_KEY_JSON: ${{ secrets.YC_SA_KEY_JSON }}
      VM_NAME: ${{ github.event.inputs.vm_name }}
      VM_LOGIN: ${{ github.event.inputs.vm_login }}
      REMOTE_DIR_CANDIDATES: "~/bfl-onprem ~/src/bfl-onprem"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install yc CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash -s -- -a
          echo "$HOME/yandex-cloud/bin" >> $GITHUB_PATH
          yc --version

      - name: Configure yc (service account)
        shell: bash
        run: |
          set -euo pipefail
          if [[ -z "${YC_SA_KEY_JSON:-}" || -z "${YC_CLOUD_ID:-}" || -z "${YC_FOLDER_ID:-}" ]]; then
            echo "YC_* secrets are not set"; exit 2
          fi
          printf "%s" "${YC_SA_KEY_JSON}" > sa.json
          yc init --service-account-key sa.json --cloud-id "$YC_CLOUD_ID" --folder-id "$YC_FOLDER_ID" <<EOF
          n
          EOF
          yc config set compute-default-zone "${YC_ZONE:-ru-central1-a}"
          yc config list

      - name: Generate ephemeral SSH key & add to VM metadata
        id: keygen
        run: |
          set -euo pipefail
          ssh-keygen -t ed25519 -N "" -C "gh-remote-smoke-$(date +%s)" -f "$RUNNER_TEMP/yc-smoke-key"
          PUB="$(cat "$RUNNER_TEMP/yc-smoke-key.pub")"
          CURR="$(yc compute instance get "$VM_NAME" --format json | jq -r '.metadata["ssh-keys"] // ""')"
          NEW="${CURR:+$CURR"$'\n'"}${VM_LOGIN}:${PUB}"
          yc compute instance update --name "$VM_NAME" --metadata "ssh-keys=${NEW}"
          echo "key=$RUNNER_TEMP/yc-smoke-key" >> $GITHUB_OUTPUT

      - name: Bring up api+redis on VM
        run: |
          set -euo pipefail
          key="${{ steps.keygen.outputs.key }}"
          yc compute ssh --name "$VM_NAME" --login "$VM_LOGIN" --ssh-key "$key" -- \
            "set -euo pipefail; \
             dir=; for d in $REMOTE_DIR_CANDIDATES; do [[ -d \$d ]] && dir=\$d && break; done; \
             [[ -n \$dir ]] || { echo 'repo dir not found on VM'; exit 3; }; \
             cd \$dir; \
             if ! command -v docker >/dev/null 2>&1; then \
               sudo apt-get update -y && sudo apt-get install -y docker.io docker-compose-plugin && \
               sudo systemctl enable --now docker; \
             fi; \
             sudo docker compose -f docker-compose.yml -f docker-compose.override.yml up -d --build api redis; \
             sudo docker compose ps"

      - name: Create SSH tunnel to 127.0.0.1:8000
        run: |
          set -euo pipefail
          key="${{ steps.keygen.outputs.key }}"
          yc compute ssh --name "$VM_NAME" --login "$VM_LOGIN" --ssh-key "$key" -- \
            -fNT -L 18000:127.0.0.1:8000 -o ExitOnForwardFailure=yes -o ServerAliveInterval=30 -o ServerAliveCountMax=3
          sleep 1
          nc -zv 127.0.0.1 18000

      - name: Remote smoke (via tunnel)
        run: |
          set -euo pipefail
          BASE="http://127.0.0.1:18000"
          for i in {1..60}; do curl -fsS "$BASE/livez" >/dev/null && break || sleep 1; done
          {
            echo "== /livez =="
            curl -fsS "$BASE/livez"
            echo
            echo "== /readyz (status line) =="
            curl -fsSI "$BASE/readyz" | sed -n '1p'
            echo
            echo "== /api/health =="
            curl -fsS "$BASE/api/health"
            echo
            echo "== /metrics (head) =="
            curl -fsS "$BASE/metrics" | sed -n '1,20p'
            echo
            echo "== login flow =="
            h=$(mktemp); c=$(mktemp)
            curl -s -D "$h" -c "$c" "$BASE/autopilot/login" >/dev/null
            csrf=$(grep -E '\sbfl_csrf\s' "$c" | awk '{print $7}')
            echo "csrf=$csrf"
            echo -n "POST /api/auth/login → "
            curl -s -o /dev/null -w '%{http_code}\n' -b "$c" -c "$c" -H "X-CSRF-Token: $csrf" \
              -F 'username=demo' -F 'password=demo' "$BASE/api/auth/login"
            echo -n "GET /api/auth/me → "
            curl -s -o /dev/null -w '%{http_code}\n' -b "$c" "$BASE/api/auth/me"
          } | tee smoke_remote.txt

      - name: Upload smoke artifact
        uses: actions/upload-artifact@v4
        with:
          name: smoke-remote
          path: smoke_remote.txt
          retention-days: 7

      - name: Kill tunnel
        if: always()
        run: |
          pids=$(lsof -tiTCP:18000 -sTCP:LISTEN || true)
          [[ -n "$pids" ]] && kill $pids || true
